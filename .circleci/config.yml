version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.3

jobs:
  test:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>-node
    steps:
      - checkout

      # Install and cache Python dependencies
      - restore_cache:
          key: pip<< parameters.python-version >>-cache-v4-{{ checksum "ci-requirements.txt" }}
      - run:
          name: 'Install Python dependencies'
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip<< parameters.python-version >>-cache-v4-{{ checksum "ci-requirements.txt" }}
          paths:
            - 'venv'

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: 'Install npm packages'
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - 'node_modules'
      - run:
          name: 'Build and test the extension'
          command: |
            set -eux

            . venv/bin/activate
            npm run eslint:check
            python -m pip install -e '.[dev]'

            # Run Python unit tests
            pytest -v --ignore jupyterlab_pachyderm/tests/test_integrations.py jupyterlab_pachyderm

            check-manifest -v

  integration-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - install-test-deps
      - run:
          name: 'Integration tests'
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -e '.[dev]'

            # Start dev server in the background
            mkdir pfs
            PFS_MOUNT_DIR=$(pwd)/pfs python3 -m jupyterlab_pachyderm.dev_server &
            sleep 1

            # Run integration tests
            PFS_MOUNT_DIR=$(pwd)/pfs pytest -v jupyterlab_pachyderm/tests/test_integrations.py

  e2e-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - install-test-deps
      - run:
          name: 'e2e tests'
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python -m pip install -r ci-requirements.txt
            python -m pip install .
            jupyter labextension develop . --overwrite
            jupyter server extension enable jupyterlab_pachyderm
            npm ci
            npm run build

            pachctl create repo images
            pachctl put file images@master:liberty.png -f http://imgur.com/46Q8nDz.png
            pachctl list repo

            PFS_MOUNT_DIR=$(pwd)/pfs CI=true CYPRESS_RECORD_KEY=$JUPYTERLAB_PACHYDERM_CYPRESS_RECORD_KEY npm run e2e

  frontend-test:
    resource_class: xlarge
    docker:
      - image: cimg/node:16.11.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run test

  build:
    executor: python
    steps:
      - checkout

      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
      - run:
          name: 'Install Python dependencies'
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
          paths:
            - 'venv'

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: 'Install npm packages'
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - 'node_modules'

      - run:
          name: build
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m build

      - persist_to_workspace:
          root: .
          paths:
            - dist

  test-publish:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
      - run:
          name: 'Install Python dependencies'
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
          paths:
            - 'venv'
      - run:
          name: Init .pypirc
          command: |
            echo -e "[testpypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $TEST_PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload --repository testpypi dist/*

  publish:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
      - run:
          name: 'Install Python dependencies'
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.9-cache-v4-{{ checksum "ci-requirements.txt" }}
          paths:
            - 'venv'
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload dist/*

workflows:
  build-workflow:
    jobs:
      - test:
          matrix:
            parameters:
              python-version: ['3.6', '3.7', '3.8', '3.9']
          filters:
            tags:
              only: /.*/
      - frontend-test:
          filters:
            tags:
              only: /.*/
      - integration-test:
          filters:
            tags:
              only: /.*/
      - e2e-test:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - test
            - frontend-test
            - integration-test
          filters:
            tags:
              only: /.*/
      - test-publish:
          requires:
            - build
          filters:
            tags:
              only: /^v\d+\.\d+\.\d.*/
            branches:
              ignore: /.*/
      - approve-release:
          type: approval
          requires:
            - test-publish
          filters:
            tags:
              only: /^v\d+\.\d+\.\d.*/
            branches:
              ignore: /.*/
      - publish:
          requires:
            - approve-release
          filters:
            tags:
              only: /^v\d+\.\d+\.\d.*/
            branches:
              ignore: /.*/

executors:
  python:
    docker:
      - image: cimg/python:3.9-node

commands:
  install-test-deps:
    steps:
      - run: sudo apt-get update && sudo apt-get install fuse libgbm-dev
      - run:
            name: Install kind
            command: |
              curl -fLo ./kind-linux-amd64 "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-amd64" \
              && chmod +x ./kind-linux-amd64 \
              && sudo mv ./kind-linux-amd64 /usr/local/bin/kind
      - run:
          name: Install helm
          command: |
            wget https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz && \
            tar -zxvf helm-v3.7.1-linux-amd64.tar.gz && \
            chmod +x linux-amd64/helm && \
            sudo mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x kubectl && \
            sudo mv kubectl /usr/local/bin/kubectl
      - run:
          name: Install pachctl
          command: curl -o /tmp/pachctl.deb -L https://github.com/pachyderm/pachyderm/releases/download/v2.0.2/pachctl_2.0.2_amd64.deb && sudo dpkg -i /tmp/pachctl.deb
      - run:
          name: Setup helm
          command: helm repo add pach https://helm.pachyderm.com && helm repo update
      - run:
          name: Start kind
          command: kind create cluster && kubectl config set current-context kind-kind
      - run:
          name: Install pach
          command: helm install pachd pach/pachyderm --set deployTarget=LOCAL,pachd.service.type=NodePort
      - run:
          name: Wait for pach # need to wait before testing kubectl as pach is not visible to kubectl yet
          command: |
            sleep 20
            kubectl wait --for=condition=ready pod -l app=pachd --timeout=5m
            pachctl version
      - run:
          name: Setup pach # Get Kind node IP and pass that to pachctl
          command: |-
            echo '{"pachd_address": "grpc://'"$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)":30650'"}' | pachctl config set context local --overwrite
            pachctl config set active-context local
