{
  "swagger": "2.0",
  "info": {
    "title": "pfs/pfs.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "API"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "AddFileURLSource": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "recursive": {
          "type": "boolean"
        },
        "concurrency": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EgressResponseObjectStorageResult": {
      "type": "object",
      "properties": {
        "bytesWritten": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "EgressResponseSQLDatabaseResult": {
      "type": "object",
      "properties": {
        "rowsWritten": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "SQLDatabaseEgressFileFormat": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormatType"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SQLDatabaseEgressFileFormatType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CSV",
        "JSON",
        "PARQUET"
      ],
      "default": "UNKNOWN"
    },
    "auth_v2Permission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNKNOWN",
        "CLUSTER_MODIFY_BINDINGS",
        "CLUSTER_GET_BINDINGS",
        "CLUSTER_GET_PACHD_LOGS",
        "CLUSTER_GET_LOKI_LOGS",
        "CLUSTER_AUTH_ACTIVATE",
        "CLUSTER_AUTH_DEACTIVATE",
        "CLUSTER_AUTH_GET_CONFIG",
        "CLUSTER_AUTH_SET_CONFIG",
        "CLUSTER_AUTH_GET_ROBOT_TOKEN",
        "CLUSTER_AUTH_MODIFY_GROUP_MEMBERS",
        "CLUSTER_AUTH_GET_GROUPS",
        "CLUSTER_AUTH_GET_GROUP_USERS",
        "CLUSTER_AUTH_EXTRACT_TOKENS",
        "CLUSTER_AUTH_RESTORE_TOKEN",
        "CLUSTER_AUTH_GET_PERMISSIONS_FOR_PRINCIPAL",
        "CLUSTER_AUTH_DELETE_EXPIRED_TOKENS",
        "CLUSTER_AUTH_REVOKE_USER_TOKENS",
        "CLUSTER_AUTH_ROTATE_ROOT_TOKEN",
        "CLUSTER_ENTERPRISE_ACTIVATE",
        "CLUSTER_ENTERPRISE_HEARTBEAT",
        "CLUSTER_ENTERPRISE_GET_CODE",
        "CLUSTER_ENTERPRISE_DEACTIVATE",
        "CLUSTER_ENTERPRISE_PAUSE",
        "CLUSTER_IDENTITY_SET_CONFIG",
        "CLUSTER_IDENTITY_GET_CONFIG",
        "CLUSTER_IDENTITY_CREATE_IDP",
        "CLUSTER_IDENTITY_UPDATE_IDP",
        "CLUSTER_IDENTITY_LIST_IDPS",
        "CLUSTER_IDENTITY_GET_IDP",
        "CLUSTER_IDENTITY_DELETE_IDP",
        "CLUSTER_IDENTITY_CREATE_OIDC_CLIENT",
        "CLUSTER_IDENTITY_UPDATE_OIDC_CLIENT",
        "CLUSTER_IDENTITY_LIST_OIDC_CLIENTS",
        "CLUSTER_IDENTITY_GET_OIDC_CLIENT",
        "CLUSTER_IDENTITY_DELETE_OIDC_CLIENT",
        "CLUSTER_DEBUG_DUMP",
        "CLUSTER_LICENSE_ACTIVATE",
        "CLUSTER_LICENSE_GET_CODE",
        "CLUSTER_LICENSE_ADD_CLUSTER",
        "CLUSTER_LICENSE_UPDATE_CLUSTER",
        "CLUSTER_LICENSE_DELETE_CLUSTER",
        "CLUSTER_LICENSE_LIST_CLUSTERS",
        "CLUSTER_CREATE_SECRET",
        "CLUSTER_LIST_SECRETS",
        "SECRET_DELETE",
        "SECRET_INSPECT",
        "CLUSTER_DELETE_ALL",
        "REPO_READ",
        "REPO_WRITE",
        "REPO_MODIFY_BINDINGS",
        "REPO_DELETE",
        "REPO_INSPECT_COMMIT",
        "REPO_LIST_COMMIT",
        "REPO_DELETE_COMMIT",
        "REPO_CREATE_BRANCH",
        "REPO_LIST_BRANCH",
        "REPO_DELETE_BRANCH",
        "REPO_INSPECT_FILE",
        "REPO_LIST_FILE",
        "REPO_ADD_PIPELINE_READER",
        "REPO_REMOVE_PIPELINE_READER",
        "REPO_ADD_PIPELINE_WRITER",
        "PIPELINE_LIST_JOB",
        "CLUSTER_SET_DEFAULTS",
        "PROJECT_CREATE",
        "PROJECT_DELETE",
        "PROJECT_LIST_REPO",
        "PROJECT_CREATE_REPO",
        "PROJECT_MODIFY_BINDINGS"
      ],
      "default": "PERMISSION_UNKNOWN",
      "description": "- CLUSTER_CREATE_SECRET: TODO(actgardner): Make k8s secrets into nouns and add an Update RPC\n - CLUSTER_SET_DEFAULTS: CLUSTER_SET_DEFAULTS is part of PPS.",
      "title": "Permission represents the ability to perform a given operation on a Resource"
    },
    "pfs_v2ActivateAuthResponse": {
      "type": "object"
    },
    "pfs_v2AddFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        },
        "raw": {
          "type": "string",
          "format": "byte"
        },
        "url": {
          "$ref": "#/definitions/AddFileURLSource"
        }
      }
    },
    "pfs_v2AuthInfo": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "description": "The callers access level to the relevant resource. These are very granular\npermissions - for the end user it makes sense to show them the roles\nthey have instead."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The caller's roles on the relevant resource. This includes inherited\nroles from the cluster, project, group membership, etc."
        }
      },
      "title": "AuthInfo includes the caller's access scope for a resource, and is returned\nby services like ListRepo, InspectRepo, and ListProject, but is not persisted in the database.\nIt's used by the Pachyderm dashboard to render repo access appropriately.\nTo set a user's auth scope for a resource, use the Pachyderm Auth API (in src/auth/auth.proto)"
    },
    "pfs_v2Branch": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2BranchInfo": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "head": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "provenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "subvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "directProvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger"
        }
      }
    },
    "pfs_v2CheckStorageResponse": {
      "type": "object",
      "properties": {
        "chunkObjectCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pfs_v2Commit": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "id": {
          "type": "string"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch",
          "title": "only used by the client"
        }
      },
      "title": "Commit is a reference to a commit (e.g. the collection of branches and the\ncollection of currently-open commits in etcd are collections of Commit\nprotos)"
    },
    "pfs_v2CommitInfo": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "origin": {
          "$ref": "#/definitions/pfs_v2CommitOrigin"
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided script describing this commit"
        },
        "parentCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "childCommits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "finishing": {
          "type": "string",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "format": "date-time"
        },
        "directProvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "error": {
          "type": "string"
        },
        "sizeBytesUpperBound": {
          "type": "string",
          "format": "int64"
        },
        "details": {
          "$ref": "#/definitions/pfs_v2CommitInfoDetails"
        }
      },
      "title": "CommitInfo is the main data structure representing a commit in etcd"
    },
    "pfs_v2CommitInfoDetails": {
      "type": "object",
      "properties": {
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "compactingTime": {
          "type": "string"
        },
        "validatingTime": {
          "type": "string"
        }
      },
      "title": "Details are only provided when explicitly requested"
    },
    "pfs_v2CommitOrigin": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/pfs_v2OriginKind"
        }
      }
    },
    "pfs_v2CommitSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "pfs_v2CommitSetInfo": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        },
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2CommitInfo"
          }
        }
      }
    },
    "pfs_v2CommitState": {
      "type": "string",
      "enum": [
        "COMMIT_STATE_UNKNOWN",
        "STARTED",
        "READY",
        "FINISHING",
        "FINISHED"
      ],
      "default": "COMMIT_STATE_UNKNOWN",
      "description": "CommitState describes the states a commit can be in.\nThe states are increasingly specific, i.e. a commit that is FINISHED also counts as STARTED.\n\n - STARTED: The commit has been started, all commits satisfy this state.\n - READY: The commit has been started, and all of its provenant commits have been finished.\n - FINISHING: The commit is in the process of being finished.\n - FINISHED: The commit has been finished."
    },
    "pfs_v2CopyFile": {
      "type": "object",
      "properties": {
        "dst": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        },
        "src": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "append": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2CreateFileSetResponse": {
      "type": "object",
      "properties": {
        "fileSetId": {
          "type": "string"
        }
      }
    },
    "pfs_v2DeleteFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        }
      }
    },
    "pfs_v2DeleteRepoResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "The repos that were deleted, perhaps none."
        }
      },
      "description": "DeleteRepoResponse returns the repos that were deleted by a DeleteRepo call."
    },
    "pfs_v2DeleteReposResponse": {
      "type": "object",
      "properties": {
        "repos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Repo"
          }
        }
      }
    },
    "pfs_v2DiffFileResponse": {
      "type": "object",
      "properties": {
        "newFile": {
          "$ref": "#/definitions/pfs_v2FileInfo"
        },
        "oldFile": {
          "$ref": "#/definitions/pfs_v2FileInfo"
        }
      }
    },
    "pfs_v2EgressResponse": {
      "type": "object",
      "properties": {
        "objectStorage": {
          "$ref": "#/definitions/EgressResponseObjectStorageResult"
        },
        "sqlDatabase": {
          "$ref": "#/definitions/EgressResponseSQLDatabaseResult"
        }
      }
    },
    "pfs_v2File": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        }
      }
    },
    "pfs_v2FileInfo": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "fileType": {
          "$ref": "#/definitions/pfs_v2FileType"
        },
        "committed": {
          "type": "string",
          "format": "date-time"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pfs_v2FileType": {
      "type": "string",
      "enum": [
        "RESERVED",
        "FILE",
        "DIR"
      ],
      "default": "RESERVED"
    },
    "pfs_v2FindCommitsResponse": {
      "type": "object",
      "properties": {
        "foundCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "lastSearchedCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "commitsSearched": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pfs_v2FsckResponse": {
      "type": "object",
      "properties": {
        "fix": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "pfs_v2GetCacheResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pfs_v2ObjectStorageEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "pfs_v2OriginKind": {
      "type": "string",
      "enum": [
        "ORIGIN_KIND_UNKNOWN",
        "USER",
        "AUTO",
        "FSCK"
      ],
      "default": "ORIGIN_KIND_UNKNOWN",
      "title": "These are the different places where a commit may be originated from"
    },
    "pfs_v2PathRange": {
      "type": "object",
      "properties": {
        "lower": {
          "type": "string"
        },
        "upper": {
          "type": "string"
        }
      }
    },
    "pfs_v2Project": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2ProjectInfo": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "description": {
          "type": "string"
        },
        "authInfo": {
          "$ref": "#/definitions/pfs_v2AuthInfo"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pfs_v2Repo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2RepoInfo": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "sizeBytesUpperBound": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "branches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "authInfo": {
          "$ref": "#/definitions/pfs_v2AuthInfo",
          "title": "Set by ListRepo and InspectRepo if Pachyderm's auth system is active, but\nnot stored in etcd. To set a user's auth scope for a repo, use the\nPachyderm Auth API (in src/client/auth/auth.proto)"
        },
        "details": {
          "$ref": "#/definitions/pfs_v2RepoInfoDetails"
        }
      },
      "title": "RepoInfo is the main data structure representing a Repo in etcd"
    },
    "pfs_v2RepoInfoDetails": {
      "type": "object",
      "properties": {
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Details are only provided when explicitly requested"
    },
    "pfs_v2SQLDatabaseEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "fileFormat": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormat"
        },
        "secret": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgressSecret"
        }
      }
    },
    "pfs_v2SQLDatabaseEgressSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "pfs_v2ShardFileSetResponse": {
      "type": "object",
      "properties": {
        "shards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2PathRange"
          }
        }
      }
    },
    "pfs_v2Trigger": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "title": "Which branch this trigger refers to"
        },
        "all": {
          "type": "boolean",
          "description": "All indicates that all conditions must be satisfied before the trigger\nhappens, otherwise any conditions being satisfied will trigger it."
        },
        "rateLimitSpec": {
          "type": "string",
          "description": "Triggers if the rate limit spec (cron expression) has been satisfied since\nthe last trigger."
        },
        "size": {
          "type": "string",
          "description": "Triggers if there's been `size` new data added since the last trigger."
        },
        "commits": {
          "type": "string",
          "format": "int64",
          "description": "Triggers if there's been `commits` new commits added since the last trigger."
        },
        "cronSpec": {
          "type": "string",
          "description": "Creates a background process which fires the trigger on the schedule\nprovided by the cron spec.\nThis condition is mutually exclusive with respect to the others, so\nsetting this will result with the trigger only firing based on the cron\nschedule."
        }
      },
      "description": "Trigger defines the conditions under which a head is moved, and to which\nbranch it is moved."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "taskapiGroup": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "taskapiState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "RUNNING",
        "SUCCESS",
        "FAILURE",
        "CLAIMED"
      ],
      "default": "UNKNOWN",
      "title": "- CLAIMED: not a real state used by task logic"
    },
    "taskapiTaskInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/taskapiGroup"
        },
        "state": {
          "$ref": "#/definitions/taskapiState"
        },
        "reason": {
          "type": "string"
        },
        "inputType": {
          "type": "string"
        },
        "inputData": {
          "type": "string"
        }
      }
    }
  }
}
