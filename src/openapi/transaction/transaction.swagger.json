{
  "swagger": "2.0",
  "info": {
    "title": "transaction/transaction.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "API"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "SQLDatabaseEgressFileFormat": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormatType"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SQLDatabaseEgressFileFormatType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CSV",
        "JSON",
        "PARQUET"
      ],
      "default": "UNKNOWN"
    },
    "pfs_v2Branch": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2Commit": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "id": {
          "type": "string"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch",
          "title": "only used by the client"
        }
      },
      "title": "Commit is a reference to a commit (e.g. the collection of branches and the\ncollection of currently-open commits in etcd are collections of Commit\nprotos)"
    },
    "pfs_v2CommitSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "pfs_v2CreateBranchRequest": {
      "type": "object",
      "properties": {
        "head": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "provenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger"
        },
        "newCommitSet": {
          "type": "boolean",
          "title": "overrides the default behavior of using the same CommitSet as 'head'"
        }
      }
    },
    "pfs_v2CreateRepoRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "description": {
          "type": "string"
        },
        "update": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteBranchRequest": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteRepoRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2FinishCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided string describing this commit. Setting this\nwill overwrite the description set in StartCommit"
        },
        "error": {
          "type": "string"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2ObjectStorageEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "pfs_v2Project": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2Repo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2SQLDatabaseEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "fileFormat": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormat"
        },
        "secret": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgressSecret"
        }
      }
    },
    "pfs_v2SQLDatabaseEgressSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "pfs_v2SquashCommitSetRequest": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        }
      }
    },
    "pfs_v2StartCommitRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/pfs_v2Commit",
          "description": "parent may be empty in which case the commit that Branch points to will be used as the parent.\nIf the branch does not exist, the commit will have no parent."
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided string describing this commit"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        }
      }
    },
    "pfs_v2Trigger": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "title": "Which branch this trigger refers to"
        },
        "all": {
          "type": "boolean",
          "description": "All indicates that all conditions must be satisfied before the trigger\nhappens, otherwise any conditions being satisfied will trigger it."
        },
        "rateLimitSpec": {
          "type": "string",
          "description": "Triggers if the rate limit spec (cron expression) has been satisfied since\nthe last trigger."
        },
        "size": {
          "type": "string",
          "description": "Triggers if there's been `size` new data added since the last trigger."
        },
        "commits": {
          "type": "string",
          "format": "int64",
          "description": "Triggers if there's been `commits` new commits added since the last trigger."
        },
        "cronSpec": {
          "type": "string",
          "description": "Creates a background process which fires the trigger on the schedule\nprovided by the cron spec.\nThis condition is mutually exclusive with respect to the others, so\nsetting this will result with the trigger only firing based on the cron\nschedule."
        }
      },
      "description": "Trigger defines the conditions under which a head is moved, and to which\nbranch it is moved."
    },
    "pps_v2CreatePipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "tfJob": {
          "$ref": "#/definitions/pps_v2TFJob",
          "title": "tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs\nwhen running in a kubernetes cluster on which kubeflow has been installed.\nExactly one of 'tf_job' and 'transform' should be set"
        },
        "transform": {
          "$ref": "#/definitions/pps_v2Transform"
        },
        "parallelismSpec": {
          "$ref": "#/definitions/pps_v2ParallelismSpec"
        },
        "egress": {
          "$ref": "#/definitions/pps_v2Egress"
        },
        "update": {
          "type": "boolean"
        },
        "outputBranch": {
          "type": "string"
        },
        "s3Out": {
          "type": "boolean",
          "title": "s3_out, if set, requires a pipeline's user to write to its output repo\nvia Pachyderm's s3 gateway (if set, workers will serve Pachyderm's s3\ngateway API at http://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.out/my/file).\nIn this mode /pfs_v2/out won't be walked or uploaded, and the s3 gateway\nservice in the workers will allow writes to the job's output commit"
        },
        "resourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "resourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "sidecarResourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "input": {
          "$ref": "#/definitions/pps_v2Input"
        },
        "description": {
          "type": "string"
        },
        "reprocess": {
          "type": "boolean",
          "title": "Reprocess forces the pipeline to reprocess all datums.\nIt only has meaning if Update is true"
        },
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        },
        "spout": {
          "$ref": "#/definitions/pps_v2Spout"
        },
        "datumSetSpec": {
          "$ref": "#/definitions/pps_v2DatumSetSpec"
        },
        "datumTimeout": {
          "type": "string"
        },
        "jobTimeout": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "datumTries": {
          "type": "string",
          "format": "int64"
        },
        "schedulingSpec": {
          "$ref": "#/definitions/pps_v2SchedulingSpec"
        },
        "podSpec": {
          "type": "string",
          "title": "deprecated, use pod_patch below"
        },
        "podPatch": {
          "type": "string",
          "title": "a json patch will be applied to the pipeline's pod_spec before it's created;"
        },
        "specCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "metadata": {
          "$ref": "#/definitions/pps_v2Metadata"
        },
        "reprocessSpec": {
          "type": "string"
        },
        "autoscaling": {
          "type": "boolean"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Toleration"
          }
        },
        "sidecarResourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "dryRun": {
          "type": "boolean"
        },
        "determined": {
          "$ref": "#/definitions/pps_v2Determined"
        }
      }
    },
    "pps_v2CreatePipelineTransaction": {
      "type": "object",
      "properties": {
        "createPipelineRequest": {
          "$ref": "#/definitions/pps_v2CreatePipelineRequest"
        },
        "userJson": {
          "type": "string",
          "title": "the JSON the user originally submitted"
        },
        "effectiveJson": {
          "type": "string",
          "title": "the effective spec: the result of merging the user JSON into the cluster defaults"
        }
      }
    },
    "pps_v2CronInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "spec": {
          "type": "string"
        },
        "overwrite": {
          "type": "boolean",
          "description": "Overwrite, if true, will expose a single datum that gets overwritten each\ntick. If false, it will create a new datum for each tick."
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pps_v2DatumSetSpec": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64",
          "description": "number, if nonzero, specifies that each datum set should contain `number`\ndatums. Datum sets may contain fewer if the total number of datums don't\ndivide evenly."
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "description": "size_bytes, if nonzero, specifies a target size for each datum set.\nDatum sets may be larger or smaller than size_bytes, but will usually be\npretty close to size_bytes in size."
        },
        "perWorker": {
          "type": "string",
          "format": "int64",
          "description": "per_worker, if nonzero, specifies how many datum sets should be created\nfor each worker. It can't be set with number or size_bytes."
        }
      },
      "description": "DatumSetSpec specifies how a pipeline should split its datums into datum sets."
    },
    "pps_v2Determined": {
      "type": "object",
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2Egress": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "objectStorage": {
          "$ref": "#/definitions/pfs_v2ObjectStorageEgress"
        },
        "sqlDatabase": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgress"
        }
      }
    },
    "pps_v2GPUSpec": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of GPU (nvidia.com/gpu or amd.com/gpu for example)."
        },
        "number": {
          "type": "string",
          "format": "int64",
          "description": "The number of GPUs to request."
        }
      }
    },
    "pps_v2Input": {
      "type": "object",
      "properties": {
        "pfs": {
          "$ref": "#/definitions/pps_v2PFSInput"
        },
        "join": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "group": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "cross": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "union": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "cron": {
          "$ref": "#/definitions/pps_v2CronInput"
        }
      }
    },
    "pps_v2Job": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "pps_v2JobState": {
      "type": "string",
      "enum": [
        "JOB_STATE_UNKNOWN",
        "JOB_CREATED",
        "JOB_STARTING",
        "JOB_RUNNING",
        "JOB_FAILURE",
        "JOB_SUCCESS",
        "JOB_KILLED",
        "JOB_EGRESSING",
        "JOB_FINISHING",
        "JOB_UNRUNNABLE"
      ],
      "default": "JOB_STATE_UNKNOWN"
    },
    "pps_v2Metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2PFSInput": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "repoType": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "glob": {
          "type": "string"
        },
        "joinOn": {
          "type": "string"
        },
        "outerJoin": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "string"
        },
        "lazy": {
          "type": "boolean"
        },
        "emptyFiles": {
          "type": "boolean",
          "description": "EmptyFiles, if true, will cause files from this PFS input to be\npresented as empty files. This is useful in shuffle pipelines where you\nwant to read the names of files and reorganize them using symlinks."
        },
        "s3": {
          "type": "boolean",
          "title": "S3, if true, will cause the worker to NOT download or link files from this\ninput into the /pfs_v2 directory. Instead, an instance of our S3 gateway\nservice will run on each of the sidecars, and data can be retrieved from\nthis input by querying\nhttp://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.\u003cinput\u003e/my/file"
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger",
          "description": "Trigger defines when this input is processed by the pipeline, if it's nil\nthe input is processed anytime something is committed to the input branch."
        }
      }
    },
    "pps_v2ParallelismSpec": {
      "type": "object",
      "properties": {
        "constant": {
          "type": "string",
          "format": "uint64",
          "title": "Starts the pipeline/job with a 'constant' workers, unless 'constant' is\nzero. If 'constant' is zero (which is the zero value of ParallelismSpec),\nthen Pachyderm will choose the number of workers that is started,\n(currently it chooses the number of workers in the cluster)"
        }
      }
    },
    "pps_v2Pipeline": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "pps_v2ProcessStats": {
      "type": "object",
      "properties": {
        "downloadTime": {
          "type": "string"
        },
        "processTime": {
          "type": "string"
        },
        "uploadTime": {
          "type": "string"
        },
        "downloadBytes": {
          "type": "string",
          "format": "int64"
        },
        "uploadBytes": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pps_v2ResourceSpec": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float",
          "title": "The number of CPUs each worker needs (partial values are allowed, and\nencouraged)"
        },
        "memory": {
          "type": "string",
          "description": "The amount of memory each worker needs (in bytes, with allowed\nSI suffixes (M, K, G, Mi, Ki, Gi, etc)."
        },
        "gpu": {
          "$ref": "#/definitions/pps_v2GPUSpec",
          "description": "The spec for GPU resources."
        },
        "disk": {
          "type": "string",
          "description": "The amount of ephemeral storage each worker needs (in bytes, with allowed\nSI suffixes (M, K, G, Mi, Ki, Gi, etc)."
        }
      },
      "description": "ResourceSpec describes the amount of resources that pipeline pods should\nrequest from kubernetes, for scheduling."
    },
    "pps_v2SchedulingSpec": {
      "type": "object",
      "properties": {
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priorityClassName": {
          "type": "string"
        }
      }
    },
    "pps_v2SecretMount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must be the name of the secret in kubernetes."
        },
        "key": {
          "type": "string",
          "description": "Key of the secret to load into env_var, this field only has meaning if EnvVar != \"\"."
        },
        "mountPath": {
          "type": "string"
        },
        "envVar": {
          "type": "string"
        }
      }
    },
    "pps_v2Service": {
      "type": "object",
      "properties": {
        "internalPort": {
          "type": "integer",
          "format": "int32"
        },
        "externalPort": {
          "type": "integer",
          "format": "int32"
        },
        "ip": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "pps_v2Spout": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        }
      }
    },
    "pps_v2StopJobRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "pps_v2TFJob": {
      "type": "object",
      "properties": {
        "tfJob": {
          "type": "string",
          "description": "tf_job  is a serialized Kubeflow TFJob spec. Pachyderm sends this directly\nto a kubernetes cluster on which kubeflow has been installed, instead of\ncreating a pipeline ReplicationController as it normally would."
        }
      }
    },
    "pps_v2TaintEffect": {
      "type": "string",
      "enum": [
        "ALL_EFFECTS",
        "NO_SCHEDULE",
        "PREFER_NO_SCHEDULE",
        "NO_EXECUTE"
      ],
      "default": "ALL_EFFECTS",
      "description": "TaintEffect is an effect that can be matched by a toleration.\n\n - ALL_EFFECTS: Empty matches all effects.\n - NO_SCHEDULE: \"NoSchedule\"\n - PREFER_NO_SCHEDULE: \"PreferNoSchedule\"\n - NO_EXECUTE: \"NoExecute\""
    },
    "pps_v2Toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the taint key that the toleration applies to.  Empty means match all taint keys."
        },
        "operator": {
          "$ref": "#/definitions/pps_v2TolerationOperator",
          "description": "operator represents a key's relationship to the value."
        },
        "value": {
          "type": "string",
          "description": "value is the taint value the toleration matches to."
        },
        "effect": {
          "$ref": "#/definitions/pps_v2TaintEffect",
          "description": "effect indicates the taint effect to match.  Empty means match all taint effects."
        },
        "tolerationSeconds": {
          "type": "string",
          "format": "int64",
          "description": "toleration_seconds represents the period of time the toleration (which must be of effect\nNoExecute, otherwise this field is ignored) tolerates the taint.  If not set, tolerate the\ntaint forever."
        }
      },
      "description": "Toleration is a Kubernetes toleration."
    },
    "pps_v2TolerationOperator": {
      "type": "string",
      "enum": [
        "EMPTY",
        "EXISTS",
        "EQUAL"
      ],
      "default": "EMPTY",
      "description": "TolerationOperator relates a Toleration's key to its value.\n\n - EMPTY: K8s doesn't have this, but it's possible to represent something similar.\n - EXISTS: \"Exists\"\n - EQUAL: \"Equal\""
    },
    "pps_v2Transform": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errCmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2SecretMount"
          }
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stdin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errStdin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "acceptReturnCode": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "debug": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "workingDir": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "memoryVolume": {
          "type": "boolean"
        },
        "datumBatching": {
          "type": "boolean"
        }
      }
    },
    "pps_v2UpdateJobStateRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "state": {
          "$ref": "#/definitions/pps_v2JobState"
        },
        "reason": {
          "type": "string"
        },
        "restart": {
          "type": "string",
          "format": "uint64"
        },
        "dataProcessed": {
          "type": "string",
          "format": "int64"
        },
        "dataSkipped": {
          "type": "string",
          "format": "int64"
        },
        "dataFailed": {
          "type": "string",
          "format": "int64"
        },
        "dataRecovered": {
          "type": "string",
          "format": "int64"
        },
        "dataTotal": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/pps_v2ProcessStats"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "transaction_v2Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "transaction_v2TransactionInfo": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction_v2Transaction"
        },
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionRequest"
          }
        },
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionResponse"
          }
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "transaction_v2TransactionInfos": {
      "type": "object",
      "properties": {
        "transactionInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionInfo"
          }
        }
      }
    },
    "transaction_v2TransactionRequest": {
      "type": "object",
      "properties": {
        "createRepo": {
          "$ref": "#/definitions/pfs_v2CreateRepoRequest",
          "title": "Exactly one of these fields should be set"
        },
        "deleteRepo": {
          "$ref": "#/definitions/pfs_v2DeleteRepoRequest"
        },
        "startCommit": {
          "$ref": "#/definitions/pfs_v2StartCommitRequest"
        },
        "finishCommit": {
          "$ref": "#/definitions/pfs_v2FinishCommitRequest"
        },
        "squashCommitSet": {
          "$ref": "#/definitions/pfs_v2SquashCommitSetRequest"
        },
        "createBranch": {
          "$ref": "#/definitions/pfs_v2CreateBranchRequest"
        },
        "deleteBranch": {
          "$ref": "#/definitions/pfs_v2DeleteBranchRequest"
        },
        "updateJobState": {
          "$ref": "#/definitions/pps_v2UpdateJobStateRequest"
        },
        "stopJob": {
          "$ref": "#/definitions/pps_v2StopJobRequest"
        },
        "createPipelineV2": {
          "$ref": "#/definitions/pps_v2CreatePipelineTransaction"
        }
      }
    },
    "transaction_v2TransactionResponse": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit",
          "description": "Only used for StartCommit - any way we can deterministically provide this before finishing the transaction?",
          "title": "At most, one of these fields should be set (most responses are empty)"
        }
      }
    }
  }
}
